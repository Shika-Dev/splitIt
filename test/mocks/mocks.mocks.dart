// Mocks generated by Mockito 5.4.5 from annotations
// in split_it/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i16;
import 'dart:io' as _i23;

import 'package:dio/dio.dart' as _i12;
import 'package:flutter_bloc/flutter_bloc.dart' as _i24;
import 'package:hive/hive.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:split_it/Core/Services/ocr_service.dart' as _i14;
import 'package:split_it/Data/Datasources/Local/Entities/split_bill_entity.dart'
    as _i10;
import 'package:split_it/Data/Datasources/Local/Entities/summary_entity.dart'
    as _i11;
import 'package:split_it/Data/Datasources/Local/local_datasources.dart' as _i6;
import 'package:split_it/Data/Datasources/Remote/network/dio.dart' as _i7;
import 'package:split_it/Data/Datasources/Remote/remote_datasources.dart'
    as _i5;
import 'package:split_it/Data/Datasources/Remote/Responses/deepseek_response.dart'
    as _i8;
import 'package:split_it/Data/Repository/split_bill_repository.dart' as _i22;
import 'package:split_it/Domain/Models/bill_item_model.dart' as _i2;
import 'package:split_it/Domain/Models/split_bill_model.dart' as _i3;
import 'package:split_it/Domain/Models/summary_model.dart' as _i4;
import 'package:split_it/Domain/Repository/abs_repository.dart' as _i21;
import 'package:split_it/Domain/Usecases/homepage_usecase.dart' as _i18;
import 'package:split_it/Domain/Usecases/scan_bill_usecase.dart' as _i13;
import 'package:split_it/Domain/Usecases/split_bill_usecase.dart' as _i19;
import 'package:split_it/Domain/Usecases/summary_usecase.dart' as _i20;
import 'package:split_it/Presentation/scan_page/bloc/scan_page_bloc.dart'
    as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBillItemModel_0 extends _i1.SmartFake implements _i2.BillItemModel {
  _FakeBillItemModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSplitBillModel_1 extends _i1.SmartFake
    implements _i3.SplitBillModel {
  _FakeSplitBillModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSummaryModel_2 extends _i1.SmartFake implements _i4.SummaryModel {
  _FakeSummaryModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteDatasources_3 extends _i1.SmartFake
    implements _i5.RemoteDatasources {
  _FakeRemoteDatasources_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalDatasources_4 extends _i1.SmartFake
    implements _i6.LocalDatasources {
  _FakeLocalDatasources_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkCall_5 extends _i1.SmartFake implements _i7.NetworkCall {
  _FakeNetworkCall_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeepseekResponse_6 extends _i1.SmartFake
    implements _i8.DeepseekResponse {
  _FakeDeepseekResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_7<E> extends _i1.SmartFake implements _i9.Box<E> {
  _FakeBox_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSplitBillEntity_8 extends _i1.SmartFake
    implements _i10.SplitBillEntity {
  _FakeSplitBillEntity_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSummaryEntity_9 extends _i1.SmartFake implements _i11.SummaryEntity {
  _FakeSummaryEntity_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_10 extends _i1.SmartFake implements _i12.BaseOptions {
  _FakeBaseOptions_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_11 extends _i1.SmartFake
    implements _i12.HttpClientAdapter {
  _FakeHttpClientAdapter_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_12 extends _i1.SmartFake implements _i12.Transformer {
  _FakeTransformer_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_13 extends _i1.SmartFake implements _i12.Interceptors {
  _FakeInterceptors_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_14<T1> extends _i1.SmartFake implements _i12.Response<T1> {
  _FakeResponse_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_15 extends _i1.SmartFake implements _i12.Dio {
  _FakeDio_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequestOptions_16 extends _i1.SmartFake
    implements _i12.RequestOptions {
  _FakeRequestOptions_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHeaders_17 extends _i1.SmartFake implements _i12.Headers {
  _FakeHeaders_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_18 extends _i1.SmartFake implements Uri {
  _FakeUri_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScanBillUsecase_19 extends _i1.SmartFake
    implements _i13.ScanBillUsecase {
  _FakeScanBillUsecase_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOCRService_20 extends _i1.SmartFake implements _i14.OCRService {
  _FakeOCRService_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScanPageState_21 extends _i1.SmartFake
    implements _i15.ScanPageState {
  _FakeScanPageState_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScanBillUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockScanBillUsecase extends _i1.Mock implements _i13.ScanBillUsecase {
  @override
  _i16.Future<_i2.BillItemModel> getBillItems(List<String>? rawOCR) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBillItems,
          [rawOCR],
        ),
        returnValue: _i16.Future<_i2.BillItemModel>.value(_FakeBillItemModel_0(
          this,
          Invocation.method(
            #getBillItems,
            [rawOCR],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i2.BillItemModel>.value(_FakeBillItemModel_0(
          this,
          Invocation.method(
            #getBillItems,
            [rawOCR],
          ),
        )),
      ) as _i16.Future<_i2.BillItemModel>);

  @override
  _i16.Future<String> saveBill(_i2.BillItemModel? model) => (super.noSuchMethod(
        Invocation.method(
          #saveBill,
          [model],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #saveBill,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #saveBill,
            [model],
          ),
        )),
      ) as _i16.Future<String>);
}

/// A class which mocks [HomepageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomepageUsecase extends _i1.Mock implements _i18.HomepageUsecase {
  @override
  _i16.Future<List<_i4.SummaryModel>> getAllSummary() => (super.noSuchMethod(
        Invocation.method(
          #getAllSummary,
          [],
        ),
        returnValue:
            _i16.Future<List<_i4.SummaryModel>>.value(<_i4.SummaryModel>[]),
        returnValueForMissingStub:
            _i16.Future<List<_i4.SummaryModel>>.value(<_i4.SummaryModel>[]),
      ) as _i16.Future<List<_i4.SummaryModel>>);

  @override
  _i16.Future<void> deleteSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSummary,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [SplitBillUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplitBillUsecase extends _i1.Mock implements _i19.SplitBillUsecase {
  @override
  _i16.Future<_i3.SplitBillModel> getBillDetail(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBillDetail,
          [id],
        ),
        returnValue:
            _i16.Future<_i3.SplitBillModel>.value(_FakeSplitBillModel_1(
          this,
          Invocation.method(
            #getBillDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i3.SplitBillModel>.value(_FakeSplitBillModel_1(
          this,
          Invocation.method(
            #getBillDetail,
            [id],
          ),
        )),
      ) as _i16.Future<_i3.SplitBillModel>);

  @override
  _i16.Future<void> deleteBill(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBill,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<String> createSummary(_i4.SummaryModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSummary,
          [model],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [model],
          ),
        )),
      ) as _i16.Future<String>);
}

/// A class which mocks [SummaryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSummaryUsecase extends _i1.Mock implements _i20.SummaryUsecase {
  @override
  _i16.Future<_i4.SummaryModel> getSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSummary,
          [id],
        ),
        returnValue: _i16.Future<_i4.SummaryModel>.value(_FakeSummaryModel_2(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i4.SummaryModel>.value(_FakeSummaryModel_2(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
      ) as _i16.Future<_i4.SummaryModel>);
}

/// A class which mocks [AbsSplitBillRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbsSplitBillRepository extends _i1.Mock
    implements _i21.AbsSplitBillRepository {
  @override
  _i16.Future<_i2.BillItemModel> getBillItemModels(List<String>? rawOcr) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBillItemModels,
          [rawOcr],
        ),
        returnValue: _i16.Future<_i2.BillItemModel>.value(_FakeBillItemModel_0(
          this,
          Invocation.method(
            #getBillItemModels,
            [rawOcr],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i2.BillItemModel>.value(_FakeBillItemModel_0(
          this,
          Invocation.method(
            #getBillItemModels,
            [rawOcr],
          ),
        )),
      ) as _i16.Future<_i2.BillItemModel>);

  @override
  _i16.Future<String> createSplitBillEntity(_i2.BillItemModel? billItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSplitBillEntity,
          [billItem],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSplitBillEntity,
            [billItem],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSplitBillEntity,
            [billItem],
          ),
        )),
      ) as _i16.Future<String>);

  @override
  _i16.Future<_i3.SplitBillModel> getBillDetail(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBillDetail,
          [id],
        ),
        returnValue:
            _i16.Future<_i3.SplitBillModel>.value(_FakeSplitBillModel_1(
          this,
          Invocation.method(
            #getBillDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i3.SplitBillModel>.value(_FakeSplitBillModel_1(
          this,
          Invocation.method(
            #getBillDetail,
            [id],
          ),
        )),
      ) as _i16.Future<_i3.SplitBillModel>);

  @override
  _i16.Future<void> deleteBill(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBill,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<String> createSummary(_i4.SummaryModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSummary,
          [model],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [model],
          ),
        )),
      ) as _i16.Future<String>);

  @override
  _i16.Future<_i4.SummaryModel> getSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSummary,
          [id],
        ),
        returnValue: _i16.Future<_i4.SummaryModel>.value(_FakeSummaryModel_2(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i4.SummaryModel>.value(_FakeSummaryModel_2(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
      ) as _i16.Future<_i4.SummaryModel>);

  @override
  _i16.Future<List<_i4.SummaryModel>> getAllSummary() => (super.noSuchMethod(
        Invocation.method(
          #getAllSummary,
          [],
        ),
        returnValue:
            _i16.Future<List<_i4.SummaryModel>>.value(<_i4.SummaryModel>[]),
        returnValueForMissingStub:
            _i16.Future<List<_i4.SummaryModel>>.value(<_i4.SummaryModel>[]),
      ) as _i16.Future<List<_i4.SummaryModel>>);

  @override
  _i16.Future<void> deleteSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSummary,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [SplitBillRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplitBillRepositoryImpl extends _i1.Mock
    implements _i22.SplitBillRepositoryImpl {
  @override
  _i5.RemoteDatasources get remoteDatasources => (super.noSuchMethod(
        Invocation.getter(#remoteDatasources),
        returnValue: _FakeRemoteDatasources_3(
          this,
          Invocation.getter(#remoteDatasources),
        ),
        returnValueForMissingStub: _FakeRemoteDatasources_3(
          this,
          Invocation.getter(#remoteDatasources),
        ),
      ) as _i5.RemoteDatasources);

  @override
  _i6.LocalDatasources get localDatasource => (super.noSuchMethod(
        Invocation.getter(#localDatasource),
        returnValue: _FakeLocalDatasources_4(
          this,
          Invocation.getter(#localDatasource),
        ),
        returnValueForMissingStub: _FakeLocalDatasources_4(
          this,
          Invocation.getter(#localDatasource),
        ),
      ) as _i6.LocalDatasources);

  @override
  _i16.Future<_i2.BillItemModel> getBillItemModels(List<String>? rawOcr) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBillItemModels,
          [rawOcr],
        ),
        returnValue: _i16.Future<_i2.BillItemModel>.value(_FakeBillItemModel_0(
          this,
          Invocation.method(
            #getBillItemModels,
            [rawOcr],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i2.BillItemModel>.value(_FakeBillItemModel_0(
          this,
          Invocation.method(
            #getBillItemModels,
            [rawOcr],
          ),
        )),
      ) as _i16.Future<_i2.BillItemModel>);

  @override
  _i16.Future<String> createSplitBillEntity(_i2.BillItemModel? billItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSplitBillEntity,
          [billItem],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSplitBillEntity,
            [billItem],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSplitBillEntity,
            [billItem],
          ),
        )),
      ) as _i16.Future<String>);

  @override
  _i16.Future<_i3.SplitBillModel> getBillDetail(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBillDetail,
          [id],
        ),
        returnValue:
            _i16.Future<_i3.SplitBillModel>.value(_FakeSplitBillModel_1(
          this,
          Invocation.method(
            #getBillDetail,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i3.SplitBillModel>.value(_FakeSplitBillModel_1(
          this,
          Invocation.method(
            #getBillDetail,
            [id],
          ),
        )),
      ) as _i16.Future<_i3.SplitBillModel>);

  @override
  _i16.Future<void> deleteBill(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBill,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<String> createSummary(_i4.SummaryModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSummary,
          [model],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [model],
          ),
        )),
      ) as _i16.Future<String>);

  @override
  _i16.Future<_i4.SummaryModel> getSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSummary,
          [id],
        ),
        returnValue: _i16.Future<_i4.SummaryModel>.value(_FakeSummaryModel_2(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i4.SummaryModel>.value(_FakeSummaryModel_2(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
      ) as _i16.Future<_i4.SummaryModel>);

  @override
  _i16.Future<List<_i4.SummaryModel>> getAllSummary() => (super.noSuchMethod(
        Invocation.method(
          #getAllSummary,
          [],
        ),
        returnValue:
            _i16.Future<List<_i4.SummaryModel>>.value(<_i4.SummaryModel>[]),
        returnValueForMissingStub:
            _i16.Future<List<_i4.SummaryModel>>.value(<_i4.SummaryModel>[]),
      ) as _i16.Future<List<_i4.SummaryModel>>);

  @override
  _i16.Future<void> deleteSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSummary,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [RemoteDatasources].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDatasources extends _i1.Mock implements _i5.RemoteDatasources {
  @override
  _i7.NetworkCall get networkCall => (super.noSuchMethod(
        Invocation.getter(#networkCall),
        returnValue: _FakeNetworkCall_5(
          this,
          Invocation.getter(#networkCall),
        ),
        returnValueForMissingStub: _FakeNetworkCall_5(
          this,
          Invocation.getter(#networkCall),
        ),
      ) as _i7.NetworkCall);

  @override
  _i16.Future<_i8.DeepseekResponse> cleanOCRText(List<String>? rawOcr) =>
      (super.noSuchMethod(
        Invocation.method(
          #cleanOCRText,
          [rawOcr],
        ),
        returnValue:
            _i16.Future<_i8.DeepseekResponse>.value(_FakeDeepseekResponse_6(
          this,
          Invocation.method(
            #cleanOCRText,
            [rawOcr],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i8.DeepseekResponse>.value(_FakeDeepseekResponse_6(
          this,
          Invocation.method(
            #cleanOCRText,
            [rawOcr],
          ),
        )),
      ) as _i16.Future<_i8.DeepseekResponse>);
}

/// A class which mocks [LocalDatasources].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatasources extends _i1.Mock implements _i6.LocalDatasources {
  @override
  _i9.Box<_i10.SplitBillEntity> get splitBillBox => (super.noSuchMethod(
        Invocation.getter(#splitBillBox),
        returnValue: _FakeBox_7<_i10.SplitBillEntity>(
          this,
          Invocation.getter(#splitBillBox),
        ),
        returnValueForMissingStub: _FakeBox_7<_i10.SplitBillEntity>(
          this,
          Invocation.getter(#splitBillBox),
        ),
      ) as _i9.Box<_i10.SplitBillEntity>);

  @override
  set splitBillBox(_i9.Box<_i10.SplitBillEntity>? _splitBillBox) =>
      super.noSuchMethod(
        Invocation.setter(
          #splitBillBox,
          _splitBillBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Box<_i11.SummaryEntity> get summaryBox => (super.noSuchMethod(
        Invocation.getter(#summaryBox),
        returnValue: _FakeBox_7<_i11.SummaryEntity>(
          this,
          Invocation.getter(#summaryBox),
        ),
        returnValueForMissingStub: _FakeBox_7<_i11.SummaryEntity>(
          this,
          Invocation.getter(#summaryBox),
        ),
      ) as _i9.Box<_i11.SummaryEntity>);

  @override
  set summaryBox(_i9.Box<_i11.SummaryEntity>? _summaryBox) =>
      super.noSuchMethod(
        Invocation.setter(
          #summaryBox,
          _summaryBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<String> createOrUpdateSplitBill(
          _i10.SplitBillEntity? splitBill) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrUpdateSplitBill,
          [splitBill],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createOrUpdateSplitBill,
            [splitBill],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createOrUpdateSplitBill,
            [splitBill],
          ),
        )),
      ) as _i16.Future<String>);

  @override
  _i16.Future<_i10.SplitBillEntity> getSplitBill(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSplitBill,
          [id],
        ),
        returnValue:
            _i16.Future<_i10.SplitBillEntity>.value(_FakeSplitBillEntity_8(
          this,
          Invocation.method(
            #getSplitBill,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i10.SplitBillEntity>.value(_FakeSplitBillEntity_8(
          this,
          Invocation.method(
            #getSplitBill,
            [id],
          ),
        )),
      ) as _i16.Future<_i10.SplitBillEntity>);

  @override
  _i16.Future<void> deleteBill(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBill,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<String> createSummary(_i11.SummaryEntity? summary) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSummary,
          [summary],
        ),
        returnValue: _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [summary],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #createSummary,
            [summary],
          ),
        )),
      ) as _i16.Future<String>);

  @override
  _i16.Future<_i11.SummaryEntity> getSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSummary,
          [id],
        ),
        returnValue: _i16.Future<_i11.SummaryEntity>.value(_FakeSummaryEntity_9(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i11.SummaryEntity>.value(_FakeSummaryEntity_9(
          this,
          Invocation.method(
            #getSummary,
            [id],
          ),
        )),
      ) as _i16.Future<_i11.SummaryEntity>);

  @override
  _i16.Future<List<_i11.SummaryEntity>> getAllSummary() => (super.noSuchMethod(
        Invocation.method(
          #getAllSummary,
          [],
        ),
        returnValue:
            _i16.Future<List<_i11.SummaryEntity>>.value(<_i11.SummaryEntity>[]),
        returnValueForMissingStub:
            _i16.Future<List<_i11.SummaryEntity>>.value(<_i11.SummaryEntity>[]),
      ) as _i16.Future<List<_i11.SummaryEntity>>);

  @override
  _i16.Future<void> deleteSummary(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSummary,
          [id],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i9.Box<E> {
  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
        returnValueForMissingStub: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
        returnValueForMissingStub: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getAt,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
        returnValueForMissingStub: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(
        Invocation.method(
          #keyAt,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Stream<_i9.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i16.Stream<_i9.BoxEvent>.empty(),
        returnValueForMissingStub: _i16.Stream<_i9.BoxEvent>.empty(),
      ) as _i16.Stream<_i9.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i16.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i16.Future<int>.value(0),
        returnValueForMissingStub: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);

  @override
  _i16.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i16.Future<Iterable<int>>.value(<int>[]),
        returnValueForMissingStub: _i16.Future<Iterable<int>>.value(<int>[]),
      ) as _i16.Future<Iterable<int>>);

  @override
  _i16.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i16.Future<int>.value(0),
        returnValueForMissingStub: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);

  @override
  _i16.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  _i16.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i12.Dio {
  @override
  _i12.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_10(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_10(
          this,
          Invocation.getter(#options),
        ),
      ) as _i12.BaseOptions);

  @override
  set options(_i12.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_11(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_11(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i12.HttpClientAdapter);

  @override
  set httpClientAdapter(_i12.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_12(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_12(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i12.Transformer);

  @override
  set transformer(_i12.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_13(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_13(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i12.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<_i12.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i12.Options? options,
    _i12.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i12.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i12.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i12.FileAccessMode? fileAccessMode = _i12.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i12.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i16.Future<_i12.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<dynamic>>);

  @override
  _i16.Future<_i12.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i12.ProgressCallback? onReceiveProgress,
    _i12.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i12.FileAccessMode? fileAccessMode = _i12.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i12.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #fileAccessMode: fileAccessMode,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i16.Future<_i12.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<dynamic>>.value(_FakeResponse_14<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #fileAccessMode: fileAccessMode,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<dynamic>>);

  @override
  _i16.Future<_i12.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i12.CancelToken? cancelToken,
    _i12.Options? options,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i12.CancelToken? cancelToken,
    _i12.Options? options,
    _i12.ProgressCallback? onSendProgress,
    _i12.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> fetch<T>(_i12.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i12.Dio clone({
    _i12.BaseOptions? options,
    _i12.Interceptors? interceptors,
    _i12.HttpClientAdapter? httpClientAdapter,
    _i12.Transformer? transformer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
          {
            #options: options,
            #interceptors: interceptors,
            #httpClientAdapter: httpClientAdapter,
            #transformer: transformer,
          },
        ),
        returnValue: _FakeDio_15(
          this,
          Invocation.method(
            #clone,
            [],
            {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDio_15(
          this,
          Invocation.method(
            #clone,
            [],
            {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            },
          ),
        ),
      ) as _i12.Dio);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i12.Response<T> {
  @override
  set data(T? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.RequestOptions get requestOptions => (super.noSuchMethod(
        Invocation.getter(#requestOptions),
        returnValue: _FakeRequestOptions_16(
          this,
          Invocation.getter(#requestOptions),
        ),
        returnValueForMissingStub: _FakeRequestOptions_16(
          this,
          Invocation.getter(#requestOptions),
        ),
      ) as _i12.RequestOptions);

  @override
  set requestOptions(_i12.RequestOptions? _requestOptions) =>
      super.noSuchMethod(
        Invocation.setter(
          #requestOptions,
          _requestOptions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set statusCode(int? _statusCode) => super.noSuchMethod(
        Invocation.setter(
          #statusCode,
          _statusCode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set statusMessage(String? _statusMessage) => super.noSuchMethod(
        Invocation.setter(
          #statusMessage,
          _statusMessage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.Headers get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHeaders_17(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHeaders_17(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i12.Headers);

  @override
  set headers(_i12.Headers? _headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          _headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isRedirect(bool? _isRedirect) => super.noSuchMethod(
        Invocation.setter(
          #isRedirect,
          _isRedirect,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i12.RedirectRecord> get redirects => (super.noSuchMethod(
        Invocation.getter(#redirects),
        returnValue: <_i12.RedirectRecord>[],
        returnValueForMissingStub: <_i12.RedirectRecord>[],
      ) as List<_i12.RedirectRecord>);

  @override
  set redirects(List<_i12.RedirectRecord>? _redirects) => super.noSuchMethod(
        Invocation.setter(
          #redirects,
          _redirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> get extra => (super.noSuchMethod(
        Invocation.getter(#extra),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  set extra(Map<String, dynamic>? _extra) => super.noSuchMethod(
        Invocation.setter(
          #extra,
          _extra,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Uri get realUri => (super.noSuchMethod(
        Invocation.getter(#realUri),
        returnValue: _FakeUri_18(
          this,
          Invocation.getter(#realUri),
        ),
        returnValueForMissingStub: _FakeUri_18(
          this,
          Invocation.getter(#realUri),
        ),
      ) as Uri);
}

/// A class which mocks [NetworkCall].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkCall extends _i1.Mock implements _i7.NetworkCall {
  @override
  String get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#url),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#url),
        ),
      ) as String);

  @override
  _i12.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_15(
          this,
          Invocation.getter(#dio),
        ),
        returnValueForMissingStub: _FakeDio_15(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i12.Dio);

  @override
  _i16.Future<_i12.Response<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i12.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #options: options,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> post<T>(
    String? path, {
    dynamic data,
    _i12.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #options: options,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> put<T>(
    String? path, {
    dynamic data,
    _i12.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #options: options,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);

  @override
  _i16.Future<_i12.Response<T>> delete<T>(
    String? path, {
    dynamic data,
    _i12.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #options: options,
          },
        ),
        returnValue: _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i16.Future<_i12.Response<T>>.value(_FakeResponse_14<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i16.Future<_i12.Response<T>>);
}

/// A class which mocks [OCRService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOCRService extends _i1.Mock implements _i14.OCRService {
  @override
  _i16.Future<List<String>> extractLines(_i23.File? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #extractLines,
          [image],
        ),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
}

/// A class which mocks [ScanPageBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockScanPageBloc extends _i1.Mock implements _i15.ScanPageBloc {
  @override
  _i13.ScanBillUsecase get usecase => (super.noSuchMethod(
        Invocation.getter(#usecase),
        returnValue: _FakeScanBillUsecase_19(
          this,
          Invocation.getter(#usecase),
        ),
        returnValueForMissingStub: _FakeScanBillUsecase_19(
          this,
          Invocation.getter(#usecase),
        ),
      ) as _i13.ScanBillUsecase);

  @override
  _i14.OCRService get ocrService => (super.noSuchMethod(
        Invocation.getter(#ocrService),
        returnValue: _FakeOCRService_20(
          this,
          Invocation.getter(#ocrService),
        ),
        returnValueForMissingStub: _FakeOCRService_20(
          this,
          Invocation.getter(#ocrService),
        ),
      ) as _i14.OCRService);

  @override
  _i15.ScanPageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeScanPageState_21(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeScanPageState_21(
          this,
          Invocation.getter(#state),
        ),
      ) as _i15.ScanPageState);

  @override
  _i16.Stream<_i15.ScanPageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i16.Stream<_i15.ScanPageState>.empty(),
        returnValueForMissingStub: _i16.Stream<_i15.ScanPageState>.empty(),
      ) as _i16.Stream<_i15.ScanPageState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i15.ScanPageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i15.ScanPageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i15.ScanPageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i15.ScanPageEvent>(
    _i24.EventHandler<E, _i15.ScanPageState>? handler, {
    _i24.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i24.Transition<_i15.ScanPageEvent, _i15.ScanPageState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);

  @override
  void onChange(_i24.Change<_i15.ScanPageState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
